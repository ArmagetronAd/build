# Copyright (C) 2005  by Manuel Moos
# and the AA DevTeam (see the file AUTHORS(.txt) in the main source directory)
# Last change by $Author$ on $Date$

all: tarsource
full: all rpm deb
pack: tarsource webdoc windoc zipsource
rpm-mdk: mandriva
rpm-mdkded: mandriva-dedicated

# include automatically generated files with definitions

include IncludesMakefile3

# everything z-man can build at home and work
z-man-home: tarsource zipsource webdoc windoc autopackage ubuntu-lucid
z-man-work: autopackage-legacyserver autopackage-client

# other builders are invited to add their build sets.
# clean RPM build directory
rpmclean:
	#
	# *****************************************
	# * clean RPM build directory             *
	# *****************************************
	#
	for f in $(RPMTOPDIR)/*; do rm -rf $$f/*; done

# set common variables
BASENAME=$(PACKAGE)-$(VERSION)
#RCNAME=$(BASENAME)-rc$(RC)
RCNAME=$(BASENAME)
BASENAMEDED=$(PACKAGE)-dedicated-$(VERSION)
#RCNAMEDED=$(BASENAMEDED)-rc$(RC)
RCNAMEDED=$(BASENAMEDED)
RCNAME.server=$(RCNAMEDED)
RCNAME.client=$(RCNAME)
RCNAME.legacyserver=$(RCNAMEDED)

# directory for release candidate
RCDIR=$(BUILDDIR)/B${RC}
$(RCDIR)/.tag: $(BUILDDIR)/.tag
	test -d $(RCDIR) || mkdir $(RCDIR)
	echo "" > $@

# upload directory
UPLOAD=$(RCDIR)/Upload
$(UPLOAD)/.tag: $(RCDIR)/.tag
	test -d $(UPLOAD) || mkdir $(UPLOAD)
	echo "" > $@

# bump rc number
bump:
	# update release candidate number
	rm $(RCFILE).tag
.PHONY: bump

SOURCEDIR=$(RCDIR)/$(PACKAGE)-$(VERSION)

RELEASETAGFILE = $(BUILDDIR)/.releasetag

$(RELEASETAGFILE): $(SOURCEDIR)/.tag $(VERSIONTAG) $(RCFILE)
	#
	# ************************************************
	# * determine core version, release tag and slot *
	# ************************************************
	#
	sh $(SOURCEDIR)/batch/make/releasetag $(VERSION) > $@ || { rm $@; false; }

include $(RELEASETAGFILE)

# build tarball
INPUTTARBALLBASE=tarballs/$(PACKAGE)-$(VERSION).src.tar
#INPUTTARBALLBASE2=tarballs/armagetronad-$(VERSION).tar.gz
TARBALLBASE=$(UPLOAD)/$(RCNAME).src.tar
TARBALLGZ=$(TARBALLBASE).gz
TARBALLBZ=$(TARBALLBASE).bz2

tarsource: $(TARBALLBZ) $(TARBALLGZ)

$(INPUTTARBALLBASE): $(wildcard $(INPUTTARBALLBASE).*)
	#
	# *****************************************
	# *  unpack sources                       *
	# *****************************************
	#
	${TESTVERSION}
#	mv $(INPUTTARBALLBASE2) $(INPUTTARBALLBASE).gz || true
	if test -r $(INPUTTARBALLBASE).gz  && gzip -f -d $(INPUTTARBALLBASE).gz; then echo done; else rm -f $(INPUTTARBALLBASE).gz; fi
	if test -r $(INPUTTARBALLBASE).bz2  && bzip2 -f -d $(INPUTTARBALLBASE).bz2; then echo done; else rm -f $(INPUTTARBALLBASE).bz2; fi
	test -r $@ || { echo "Source tarball not found. Please rerun make." ; rm -rf  ${SOURCETAG} ${VERSIONTAG}; false; }

$(TARBALLBZ): $(INPUTTARBALLBASE) $(UPLOAD)/.tag
	#
	# *****************************************
	# *  repack sources as bz2                *
	# *****************************************
	#
	rm -f $@
	mkdir -p tarballs/unpack
	rm -rf tarballs/unpack/*
	cd tarballs/unpack && tar -xf ../$(PACKAGE)-$(VERSION).src.tar
	cd tarballs/unpack && tar -cjf ../$(PACKAGE)-$(VERSION).src.tar.bz2 *
	rm -rf tarballs/unpack
	mv tarballs/$(PACKAGE)-$(VERSION).src.tar.bz2 $@
	test -r $@
	touch $@

$(TARBALLGZ): $(INPUTTARBALLBASE) $(UPLOAD)/.tag
	#
	# *****************************************
	# *  repack sources as gz                 *
	# *****************************************
	#
	${TESTVERSION}
	rm -f $@
	mkdir -p tarballs/unpack2
	rm -rf tarballs/unpack2/*
	cd tarballs/unpack2 && tar -xf ../$(PACKAGE)-$(VERSION).src.tar
	cd tarballs/unpack2 && tar -czf ../$(PACKAGE)-$(VERSION).src.tar.gz *
	rm -rf tarballs/unpack2
	mv tarballs/$(PACKAGE)-$(VERSION).src.tar.gz $@
	test -r $@
	touch $@

.PHONY: tarsrc

RPMVERSION=${COREVERSION}-${RELEASETAG}.${RC}
RPMSOURCE=$(RPMTOPDIR)/SOURCES/$(BASENAME).src.tar.bz2
rpmprepare: $(RPMSOURCE)
$(RPMSOURCE): $(TARBALLBZ)
	#
	# *****************************************
	# *  prepare RPM build                    *
	# *****************************************
	#

	# copy sources cleanly
	test -d "$(RPMTOPDIR)"
	rm -rf $(RPMTOPDIR)/SOURCES/$(PACKAGE)*.tar.bz2
	cp $(TARBALLBZ) $(RPMSOURCE)

RPMTAG=$(RCDIR)/.rpm
rpmbuild: $(RPMTAG).ba
rpmtest: $(RPMTAG).bl
$(RPMTAG).%: $(RPMSOURCE)  redhat/armagetronad.spec.%.m4
	#
	# *****************************************
	# *  Testing RPM build stage by stage     *
	# *****************************************
	#

	@echo Building rpms stage $*...
	cd redhat; bash ./build -$* --short-circuit 
	touch $@

$(RPMTAG).bl: $(RPMTAG).bi
$(RPMTAG).bi: $(RPMTAG).bc
$(RPMTAG).bc: $(RPMTAG).bp

$(RPMTAG): $(RPMSOURCE) redhat/*
	#
	# *****************************************
	# *  RPM build                            *
	# *****************************************
	#

	@echo Building rpms...
	touch $@.bc
	cd redhat; bash ./build -ba
	touch $@ $@.bi

rpm: $(RPMTAG).harvest
$(RPMTAG).harvest: $(RPMTAG)
	#
	# *****************************************
	# *  harvest and rename RPM build         *
	# *****************************************
	#
	find $(RPMTOPDIR) -name "$(PACKAGE)*.rpm" -exec mv \{\} $(UPLOAD) \;

#   rename files so the visible version matches our source version
	for f in ${UPLOAD}/*.rpm; do\
		ARCH=`rpm -qp --queryformat '%{arch}' $$f` ;\
		mv $$f `echo $$f | sed -e "s,${RPMVERSION},${VERSION}-${RC}," -e "s,-${RC}.$${ARCH},-${RC}.${OSTAG_GENERIC},"`;\
	done

#   rename source rpm to indicate that it is for an old version of libxml
	if test $(ALLOW_OLDLIBXML2) = yes; then mv ${UPLOAD}/${PACKAGE}-${VERSION}-${RC}.src.rpm ${UPLOAD}/${PACKAGE}-${VERSION}-${RC}.libxml2-pre-2_6_12.src.rpm; fi
	touch $@

# categorize files for aabeta upload, once with and once without upload
aabeta:
	#
	# *****************************************
	# *  categorizing files for aabeta        *
	# *****************************************
	#
	cd $(UPLOAD); USERNAME_AABETA=${USERNAME_AABETA} OSTAG=${OSTAG} OSTAG_AABETA=${OSTAG_AABETA} OSTAG_GENERIC=${OSTAG_GENERIC} PACKAGER=${PACKAGER} bash ../../../../scripts/aabeta

upload-aabeta:
	#
	# *****************************************
	# *  preparing upload to aabeta           *
	# *****************************************
	#
	cd $(UPLOAD); DO_UPLOAD=yes USERNAME_AABETA=${USERNAME_AABETA} OSTAG=${OSTAG} OSTAG_AABETA=${OSTAG_AABETA} OSTAG_GENERIC=${OSTAG_GENERIC} PACKAGER=${PACKAGER} bash ../../../../scripts/aabeta

.PHONY: aabeta upload-aabeta

mandriva: $(RPMSOURCE) mandriva/armagetronad-mdk.spec
	#
	# *****************************************
	# *  Mandriva RPM build                   *
	# *****************************************
	#
	cp mandriva/*.png $(RPMTOPDIR)/SOURCES/

	#cd mandriva
	rpm	 -ba mandriva/armagetronad-mdk.spec
	cp $(RPMTOPDIR)/RPMS/i586/armagetronad*.rpm $(UPLOAD)

mandriva-dedicated: $(RPMSOURCE) mandriva/armagetronad-dedicated-mdk.spec
	#
	# *****************************************
	# *  Mandriva RPM build                   *
	# *****************************************
	#
	cp mandriva/*.png $(RPMTOPDIR)/SOURCES/

	#cd mandriva
	rpm  -ba mandriva/armagetronad-dedicated-mdk.spec
	cp $(RPMTOPDIR)/RPMS/i586/armagetronad*.rpm $(UPLOAD)

include rawbin/Makefile

# documentation build
WINDOCDIR=$(RCDIR)/doc.windows

# windows documentation
windoc: $(WINDOCDIR)
$(RCDIR)/doc.%.build: $(SOURCEDIR)/.tag
	#
	# *****************************************
	# *  prepare $* documentation build          
	# *****************************************
	#
	# create build directory
	rm -rf $@
	mkdir $@

	# configure and make documentation
	CXXFLAGS="$(CXXFLAGS) -O0" docstyle=$* bash scripts/configure $@ $(SOURCEDIR)	--prefix='/usr/local' --disable-glout

$(RCDIR)/doc.%: $(RCDIR)/doc.%.build
	#
	# *****************************************
	# *  $* documentation build          
	# *****************************************
	#
	# install documentation
	rm -rf $@ $@-build
	mkdir $@-build
	DESTDIR=`pwd`/$@-build $(MAKE) -C $(RCDIR)/doc.$*.build/src/doc install

	# copy documentation to destination
	mv $@-build/usr/local/share/doc/games/$(PACKAGE)-dedicated/html $@
	rm -rf $@-build

# web documentation
webdoc:$(RCDIR)/doc.web

# keep windows build dir
.PRECIOUS: $(RCDIR)/doc.windows.build $(RCDIR)/doc.web.build

$(SOURCEDIR)/.tag: $(RCDIR)/.tag $(VERSIONTAG) $(INPUTTARBALLBASE)
	#
	# *****************************************
	# *  unpacking source                     *
	# *****************************************
	#
	${TESTVERSION}
	rm -rf $(SOURCEDIR)
	cd $(RCDIR); tar -xf ../../../$(INPUTTARBALLBASE)
	test -d $(SOURCEDIR)
	touch $(SOURCEDIR)
	find $(SOURCEDIR)/src/doc -name "*.html" -exec rm \{\} \;
	echo "" > $@

# windows source zip
WINSOURCE=$(UPLOAD)/$(RCNAME).src.zip
WINSOURCEDIR=$(SOURCEDIR)-win
WINBUILDDIR=$(RCDIR)/doc.windows.build

zipsource: $(WINSOURCE)
$(WINSOURCEDIR): $(SOURCEDIR)/.tag $(WINDOCDIR) $(WINBUILDDIR) Makefile scripts/winsrc
	#
	# *****************************************
	# *  prepare windows source               *
	# *****************************************
	#
#	test "$(AA_VISUALC)" != "" || { echo -e "\nCVS module armagetronad_build_visualc needs to be checked out parallel to this directory for Windows source build.\n"; false; }
	rm -rf $@ $@-proto $(RCDIR)/$(PACKAGE)
	PROGNAME=$(PROGNAME) VERSION=$(VERSION) bash scripts/winsrc $@-proto $(SOURCEDIR) $(WINBUILDDIR) $(WINDOCDIR) $(VERSION)
	mv $@-proto $@
	touch $@

$(WINSOURCE): $(WINSOURCEDIR) $(UPLOAD)/.tag
	#
	# *****************************************
	# *  pack windows source                  *
	# *****************************************
	#
	rm -f $@
	bash scripts/chdirexec $(RCDIR) zip -q -r $@ $(WINSOURCEDIR)
	touch $@

DEBSOURCEDIR=$(SOURCEDIR)-debian
debianprepare: $(DEBSOURCEDIR)
$(DEBSOURCEDIR): $(SOURCEDIR)/.tag
	#
	# *****************************************
	# *  prepare debian build                 *
	# *****************************************
	#
	mkdir -p $(RCDIR)/tmp
	cd $(RCDIR)/tmp; tar -xf ../../../../$(INPUTTARBALLBASE)
	mv $(RCDIR)/tmp/$(PACKAGE)-$(VERSION) $@
	rmdir $(RCDIR)/tmp
	cp -ax debian $@
	chmod 755 $@/debian/rules

debianbuild: $(DEBSOURCEDIR)
	#
	# *****************************************
	# *  build debian package                 *
	# *****************************************
	#
	cd $<; fakeroot debian/rules binary

deb: debianbuild $(UPLOAD)/.tag
	#
	# *****************************************
	# *  harvesting debian package            *
	# *****************************************
	#
	find $(RCDIR) -name "$(PACKAGE)*.deb" -exec mv \{\} $(UPLOAD) \;


DEBVERSION=$(subst _,~,${VERSION})~ppa
UBUNTUSOURCEDIR=$(RCDIR)/$(PACKAGE)-$(DEBVERSION)
$(UBUNTUSOURCEDIR)%.tag: $(INPUTTARBALLBASE) $(UPLOAD)/.tag
	#
	# *****************************************
	# *  prepare ubuntu build                 *
	# *****************************************
	#
	rm -rf $(UBUNTUSOURCEDIR)$*
	mkdir -p $(RCDIR)/tmp2
	cd $(RCDIR)/tmp2; tar -xf ../../../../$(INPUTTARBALLBASE)
	mv $(RCDIR)/tmp2/$(PACKAGE)-$(VERSION) $(UBUNTUSOURCEDIR)$*
	rmdir $(RCDIR)/tmp2
#   adapt the following line as ubuntu releases get updated
	bzr pull -d ../ubuntu || HOME=/noway bzr branch lp:ubuntu/armagetronad ../ubuntu
	cp -ax ../ubuntu/debian $(UBUNTUSOURCEDIR)$*/debian
#   don't even generate uninstall.
	patch -p0 -d $(UBUNTUSOURCEDIR)$* < patches/ubuntu.patch
#   Fixes var dir location of dedicated server.
	patch -p0 -d $(UBUNTUSOURCEDIR)$* < patches/ubuntu-vardir.patch
#   Updates dependencies
	patch -p0 -d $(UBUNTUSOURCEDIR)$* < patches/ubuntu-trunkdeps.patch
#   version dependant patches
	rel=$$(echo $* | sed -e "s,.*~,,"); echo patches/ubuntu~$$rel.patch; if test -r patches/ubuntu~$$rel.patch; then patch -p0 -d $(UBUNTUSOURCEDIR)$* < patches/ubuntu~$$rel.patch; fi
#   rebrand package
#	for f in ../ubuntu/debian/*; do sed -e "s/armagetronad/${PACKAGE}/g" < $$f | sed -e "s/${PACKAGE}\./armagetronad./g" > $(UBUNTUSOURCEDIR)/debian/$$(echo $$f | sed -e s,../ubuntu/debian/,, -e "s/armagetronad/${PACKAGE}/"); done
	cd $(UBUNTUSOURCEDIR)$*/debian/; for f in *; do dest=$$(echo $$f | sed -e "s,armagetronad,${PACKAGE},g"); test -d $$f || sed -e "s/armagetronad/${PACKAGE}/g" < $$f | sed -e "s/${PACKAGE}\.net/armagetronad.net/g" --e "s/${PACKAGE}\.source/armagetronad.source/g" > $$dest.out; rm $$f; mv $$dest.out $$dest; done
	chmod 755 $(UBUNTUSOURCEDIR)$*/debian/rules
#   build changelog
	DIST="`echo $* | sed -e s/^[0-9]*// -e s/.*~//`"; test -z $$DIST && DIST=hardy; sed -e "s/@distribution@/$$DIST/g" -e "s/@package@/$(PACKAGE)/g" -e "s/@version@/${DEBVERSION}$*/g" -e "s;@date@;$$(date -R);g" < doc/ubuntu-changelog.txt > $(UBUNTUSOURCEDIR)$*/debian/changelog
	cat < ../ubuntu/debian/changelog >> $(UBUNTUSOURCEDIR)$*/debian/changelog
	echo "x" > $@

$(RCDIR)/ubuntu%.tag: $(UBUNTUSOURCEDIR)%.tag
	#
	# *****************************************
	# *  ubuntu build                         *
	# *****************************************
	#
	cd $(UBUNTUSOURCEDIR)$*; fakeroot debian/rules binary
#   harvesting debian package(s)
	find $(RCDIR) -name "$(PACKAGE)*.deb" -exec mv \{\} $(UPLOAD) \;
	echo "x" > $@

xubuntu-build-%: $(RCDIR)/ubuntu%.tag
	echo $@

#real targets for the user
ubuntu: xubuntu-build-$(RC)
	echo $@
ubuntu-%: xubuntu-build-$(RC)~%
	echo $@

$(RCDIR)/${PACKAGE}_${DEBVERSION}%_source.changes: $(UBUNTUSOURCEDIR)%.tag
	#
	# ************************************
	# *  preparing ubuntu source for ppa *
	# ************************************
	#
	cd $(UBUNTUSOURCEDIR)$* && debuild -S -sa

xupload-ubuntu-%: $(RCDIR)/${PACKAGE}_${DEBVERSION}%_source.changes
	#
	# ***********************************
	# *  uploading ubuntu source to ppa *
	# ***********************************
	#
	cd $(RCDIR) && dput ppa:armagetronad-dev/ppa ${PACKAGE}_${DEBVERSION}$*_source.changes

#real targets for the user
upload-ubuntu: xupload-ubuntu-$(RC)
	echo $@
upload-ubuntu-%: xupload-ubuntu-$(RC)~%
	echo $@
upload-ubuntu-all: \
upload-ubuntu-lucid \
upload-ubuntu-maverick \
upload-ubuntu-natty \
upload-ubuntu-oneiric
	echo $@

APFILE=$(RCDIR)/.package
autopackage-client: $(APFILE).client
autopackage-server: $(APFILE).server
autopackage-legacyserver: $(APFILE).legacyserver
autopackage: autopackage-client autopackage-server
$(APFILE).%: $(SOURCEDIR)/.tag package/Makefile package/default.apspec $(UPLOAD)/.tag
	#
	# *****************************************
	# *  build autopackage $*
	# *****************************************
	#
	rm -rf ap-$*
	SOURCEDIR=$(SOURCEDIR) $(MAKE) -C package release-$*
	mv ap-$*/*.package $(UPLOAD)/$(RCNAME.$*).$(OSTAG_GENERIC).package
	rm -rf ap-$*
	touch $@

# rename renegade uploads
upload-rename: $(UPLOAD)/.tag
	if test $(PACKAGE) != armagetronad; then cd $(UPLOAD); for f in armagetronad*; do if echo $$f | egrep "armagetronad-0|armagetronad-dedicated-0" > /dev/null; then mv $$f $$(echo $$f | sed -e "s,armagetronad,$(PACKAGE),"); fi; done; fi

upload-lp: $(SOURCEDIR)/.tag $(UPLOAD)/.tag upload-rename
	#
	# *****************************************
	# *  uploading compiled files to lp       *
	# *****************************************
	#
	cp doc/releasenotes.txt $(UPLOAD)/
	head -n 1000 $(SOURCEDIR)/ChangeLog > $(UPLOAD)/ChangeLog
	cd ${UPLOAD};  ../../../../scripts/lp-upload armagetronad "$(SERIES)" "$(VERSION)" *.gz *.bz2 *.zip *.deb *.package *.rpm *.exe *.dmg
#	cd ${UPLOAD}; PROJ=armagetron-builds; test $(PACKAGE) = armagetronad && PROJ=armagetronad; ../../../../scripts/lp-upload "$$PROJ" "$(SERIES)" "$(VERSION)" *.gz *.bz2 *.zip *.deb *.package *.rpm *.exe *.dmg

upload-sf: $(UPLOAD)/.tag upload-rename
	#
	# *****************************************
	# *  uploading compiled files to sf       *
	# *****************************************
	#

	cp doc/releasenotes.txt $(UPLOAD)/
	todos $(UPLOAD)/releasenotes.txt
	cd ${UPLOAD}; mkdir -p new/$(VERSION); rsync -avP -e ssh new z-man,armagetronad@frs.sourceforge.net:/home/frs/project/a/ar/armagetronad/; rmdir new/$(VERSION); rmdir new; rsync -avP -e ssh * z-man,armagetronad@frs.sourceforge.net:/home/frs/project/a/ar/armagetronad/new/$(VERSION)/

TOEMPTYLINE=sed -e "s,^$$,," -e "t q" -e "p" -e "d" -e ": q" -e "q"

FRESHMEAT=${RCDIR}/freshmeat
freshmeat: ${FRESHMEAT} 
${FRESHMEAT}: ${RCDIR}
	#
	# *****************************************
	# *  prepare freshmeat submission         *
	# *****************************************
	#
	echo "Project: $(PACKAGE)" > $@
	if test $(STABLE) = false; then echo "Branch: Development" >> $@; else echo "Branch: Stable" >> $@; fi
	echo "Version: $(VERSION)" >> $@
	echo "#Release-Focus: Minor feature enhancements" >> $@
	echo "#Release-Focus: Major feature enhancements" >> $@
	echo "#Release-Focus: Minor bugfixes" >> $@
	echo "#Release-Focus: Major bugfixes" >> $@
	echo "#Release-Focus: Minor security fixes" >> $@
	echo "#Release-Focus: Major security fixes" >> $@
	echo "Hide: N" >> $@
	echo "Home-page-URL: http://www.armagetronad.net" >> $@
	echo "RPM-URL: http://prdownloads.sourceforge.net/armagetronad/`ls $(UPLOAD)/*.rpm | grep -e "src\|dedicated" -v | sed -e "s,.*/,,"`?download" >> $@
	echo "Gzipped-tar-URL: http://prdownloads.sourceforge.net/armagetronad/`echo $(TARBALLGZ) | sed -e "s,.*/,,"`?download" >> $@
	echo "Bzipped-tar-URL: http://prdownloads.sourceforge.net/armagetronad/`echo $(TARBALLBZ) | sed -e "s,.*/,,"`?download" >> $@
	echo "OSX-URL: http://prdownloads.sourceforge.net/armagetronad/armagetronad-$(VERSION).macosx-universal.dmg?download" >> $@
#   echo "CVS-URL: http://cvs.sourceforge.net/viewcvs.py/armagetronad" >> $@
	echo "" >> $@

# extract description
	V=$(VERSION);\
	while ! test -z $$V; do\
		grep -A 20 -a "^$$V:" doc/description.txt | tail -n 20 | $(TOEMPTYLINE) >> $@;\
		V=`echo $$V | sed -e "s,.$$,,"`;\
	done

	$$EDITOR $@
	echo "use freshmeat-submit < $@ to submit."
