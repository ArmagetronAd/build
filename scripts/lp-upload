#!/usr/bin/python

# Copyright (c) 2009 Canonical Ltd.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2, or (at your option) any
# later version.
#
# lp-set-dup is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# Authors:
#  Martin Pitt <martin.pitt@ubuntu.com>, based on
#  http://blog.launchpad.net/api/recipe-for-uploading-files-via-the-api
# 
# actually ripped from lp-project-upload. Modified as lp-upload for
# armagetronad by:
#  Manuel Moos <z-man@users.sf.net>

'''Upload a release tarball and builds to a Launchpad project.'''

import sys, datetime, os.path, subprocess, tempfile, os

from ubuntutools.lp.libsupport import get_launchpad
from launchpadlib.errors import HTTPError

def create_release(project, series_name, version):
    '''Create new release and milestone for LP project.'''

    series = None
    for ser in proj.series:
        if ser.display_name == series_name:
            series = ser
            break
    if not series:
        print >> sys.stderr, 'Series %s not found, available:' % series_name
        for s in proj.series.entries:
            print '%s: %s' % (s['display_name'], s['summary'])
        sys.exit(3)
    release_date = datetime.date.today().strftime('%Y-%m-%d')
    milestone = series.newMilestone(name=version,
            date_targeted=release_date)
    return milestone.createProductRelease(date_released=release_date)

def edit_file(prefix, description):
    (fd, f) = tempfile.mkstemp(prefix=prefix+'.')
    os.write(fd, '\n\n#------\n# Please enter the %s here. Lines which start with "#" are ignored.\n' % 
            description)
    os.close(fd)
    subprocess.call(['sensible-editor', f])
    content = ''
    for l in open(f):
        if l.startswith('#'):
            continue
        content += l

    return content.strip()

#
# main
#

if len(sys.argv) < 4:
    print >> sys.stderr, '''Upload a release to a Launchpad project.

Usage: %s <project name> <series> <version> <builds>''' % sys.argv[0]
    sys.exit(1)

(project, series, version) = sys.argv[1:4]
version=version.replace('_','-')
builds = sys.argv[4:]
#print builds

Linux=False
Windows=False
Mac=False

def prepare_file( filename ):
    # Get the signature, if available.
    signature = 'signatures/' + filename + '.asc'
    if not os.path.exists(signature):
        print 'Calling GPG to create ' + filename + ' signature...'
        if subprocess.call(['gpg', '--armor', '--sign', '--output', signature, '--detach-sig', filename]) != 0:
            print >> sys.stderr, 'gpg failed, aborting'
        
def upload_file( filename, description, mime_type, file_type ):
    # Get the file contents.
    file_content = open(filename, 'r').read()
    print "adding %s: %s, %s, %s..." % (filename, file_type, description, mime_type)

    for f in release.files:
        if filename == os.path.split(f.self_link)[-1]:
            print "Already exists, delete it first if you want to re-upload it."
            return
    
    signature = 'signatures/' + filename + '.asc'
    
    if os.path.exists(signature):
        signature_content = open(signature, 'r').read()
    else:
        signature_content = None
    
    # Create a new product release file.
    release.add_file(filename=filename, description=description,
            file_content=file_content, content_type=mime_type,
            file_type=file_type, signature_filename=signature,
            signature_content=signature_content)
    
    print "done."

try:
    lp = get_launchpad('ubuntu-dev-tools')
except Exception, e:
    print >> sys.stderr, 'Could not connect to Launchpad:', str(e)
    print >> sys.stderr, 'use "manage-credentials create -c ubuntu-dev-tools --level 2" to authorize this application, maybe clear out ~/.cache/lp_credentials.'
    sys.exit(2)

try:
    if not os.path.exists("signatures"):
        os.makedirs("signatures")
    uploads=[]
    for f in builds:
        if os.path.exists(f) and os.path.splitext(f)[1] != ".asc":
            prepare_file(f)
            basename, extension = os.path.splitext(f)
            basename, secondextension = os.path.splitext(basename)
            basename, thirdextension = os.path.splitext(basename)
            # print basename, thirdextension, secondextension, extension

            # default types
            mime_type="application/octet-stream"
            file_type="Installer file"
            description="Portable App for Linux"

            if secondextension == ".src" or thirdextension == ".src":
                file_type="Code Release Tarball"
                description="Source Tarball"
                if extension == '.bz2':
                    mime_type="application/bzip2"
                if extension == '.gz':
                    mime_type="application/x-gzip"
                if extension == '.zip':
                    mime_type="application/zip"
                    description="Source zip for Windows builds"
            elif secondextension == ".bin" or thirdextension == ".bin":
                description="Binary Tarball for Linux"
                if "data" in basename:
                    description="Data Tarball"
                if "libs" in basename:
                    description="Library Tarball for Linux"
                if extension == '.bz2':
                    Linux=True
                    mime_type="application/bzip2"
                if extension == '.gz':
                    Linux=True
                    mime_type="application/x-gzip"
            else:
                if extension == ".package":
                    description="Autopackage Installer for Linux"
                    Linux=True
                if extension == ".deb":
                    description="Debian Package"
                    Linux=True
                if extension == ".dmg":
                    description="OSX Disk Image"
                    mime_type="application/x-apple-diskimage"
                    Mac=True
                if extension == ".exe":
                    description="Windows Installer"
                    mime_type="application/exe"
                    Windows=True
                if extension == ".zip":
                    description="Windows Binary Zip"
                    mime_type="application/zip"
                    Windows=True
                if "Portable App" in description:
                    Linux=True
                if "edicated" in f:
                    description="Server " + description
                else:
                    if "-common" in f and extension == ".deb":
                        description="Common " + description
                    else:
                        description="Client " + description

            # print f,description,mime_type,file_type
            
            uploads.append((f,description,mime_type,file_type))

    # sys.exit(1)

    # Look up the project using the Launchpad instance.
    proj = lp.projects[project]
    # Find the release in the project's releases collection.
    release = None
    for rel in proj.releases:
        if rel.version == version:
            release = rel
            print "Found release %s already existing." % version
            break
    if not release:
        print "Creating release %s..." % version
        release = create_release(proj, series, version)
    
    changelog = "ChangeLog"
    if os.path.exists(changelog):
        release.changelog = open(changelog, 'r').read().strip()
    else:
        changelog = edit_file('changelog', 'changelog')
        if changelog and ( not release.changelog or len(release.changelog) == 0):
            print "Setting changelog..."
            release.changelog = changelog
    
    release_notes = "releasenotes.txt"
    if os.path.exists(release_notes):
        release.release_notes = open(release_notes, 'r').read().strip()
    else:
        release_notes = edit_file('releasenotes', 'release notes')
        if release_notes and ( not release.release_notes or len(release.release_notes) == 0):
            print "Setting release notes..."
            release.release_notes = release_notes

    # create new summary
    summary=""
    if Linux:
        summary = "Linux"
    if Mac:
        if "" != summary:
            summary += "+"
        summary += "Mac"
    if Windows:
        if "" != summary:
            summary += "+"
        summary += "Windows" 
    milestone = release.milestone
    #print dir(milestone)
    #print milestone.web_link
    #print milestone.lp_operations
    #print milestone.lp_attributes
    dummy = milestone.summary # dunno why that is needed, but it is
    milestone.summary = summary

    print "Uploading..."
    for upload in uploads:
        upload_file(upload[0], upload[1], upload[2], upload[3])
    # upload_file(tarball, 'release tarball','appplication/x-gzip', 'Code Release Tarball')

    release.lp_save()
    milestone.lp_save()

except HTTPError, e:
    print 'An error happened in the upload:', e.content
    sys.exit(1)

